// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/datastore/clients/schema/schemaClientBound.go
//
// Generated by this command:
//
//	mockgen -package=mockschemaclientbound -source=pkg/datastore/clients/schema/schemaClientBound.go -destination=./mocks/mockschemaclientbound/client.go
//

// Package mockschemaclientbound is a generated GoMock package.
package mockschemaclientbound

import (
	context "context"
	reflect "reflect"

	schema_server "github.com/sdcio/sdc-protos/sdcpb"
	gomock "go.uber.org/mock/gomock"
)

// MockSchemaClientBound is a mock of SchemaClientBound interface.
type MockSchemaClientBound struct {
	ctrl     *gomock.Controller
	recorder *MockSchemaClientBoundMockRecorder
	isgomock struct{}
}

// MockSchemaClientBoundMockRecorder is the mock recorder for MockSchemaClientBound.
type MockSchemaClientBoundMockRecorder struct {
	mock *MockSchemaClientBound
}

// NewMockSchemaClientBound creates a new mock instance.
func NewMockSchemaClientBound(ctrl *gomock.Controller) *MockSchemaClientBound {
	mock := &MockSchemaClientBound{ctrl: ctrl}
	mock.recorder = &MockSchemaClientBoundMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchemaClientBound) EXPECT() *MockSchemaClientBoundMockRecorder {
	return m.recorder
}

// GetSchemaElements mocks base method.
func (m *MockSchemaClientBound) GetSchemaElements(ctx context.Context, p *schema_server.Path, done chan struct{}) (chan *schema_server.GetSchemaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaElements", ctx, p, done)
	ret0, _ := ret[0].(chan *schema_server.GetSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaElements indicates an expected call of GetSchemaElements.
func (mr *MockSchemaClientBoundMockRecorder) GetSchemaElements(ctx, p, done any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaElements", reflect.TypeOf((*MockSchemaClientBound)(nil).GetSchemaElements), ctx, p, done)
}

// GetSchemaSdcpbPath mocks base method.
func (m *MockSchemaClientBound) GetSchemaSdcpbPath(ctx context.Context, path *schema_server.Path) (*schema_server.GetSchemaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaSdcpbPath", ctx, path)
	ret0, _ := ret[0].(*schema_server.GetSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaSdcpbPath indicates an expected call of GetSchemaSdcpbPath.
func (mr *MockSchemaClientBoundMockRecorder) GetSchemaSdcpbPath(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaSdcpbPath", reflect.TypeOf((*MockSchemaClientBound)(nil).GetSchemaSdcpbPath), ctx, path)
}
