// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/tree/entry.go
//
// Generated by this command:
//
//	mockgen -package=mockTreeEntry -source=pkg/tree/entry.go -destination=./mocks/mocktreeentry/entry.go
//

// Package mockTreeEntry is a generated GoMock package.
package mockTreeEntry

import (
	context "context"
	reflect "reflect"

	etree "github.com/beevik/etree"
	tree "github.com/sdcio/data-server/pkg/tree"
	importer "github.com/sdcio/data-server/pkg/tree/importer"
	tree_persist "github.com/sdcio/data-server/pkg/tree/tree_persist"
	types "github.com/sdcio/data-server/pkg/tree/types"
	schema_server "github.com/sdcio/sdc-protos/sdcpb"
	gomock "go.uber.org/mock/gomock"
)

// MockEntry is a mock of Entry interface.
type MockEntry struct {
	ctrl     *gomock.Controller
	recorder *MockEntryMockRecorder
	isgomock struct{}
}

// MockEntryMockRecorder is the mock recorder for MockEntry.
type MockEntryMockRecorder struct {
	mock *MockEntry
}

// NewMockEntry creates a new mock instance.
func NewMockEntry(ctrl *gomock.Controller) *MockEntry {
	mock := &MockEntry{ctrl: ctrl}
	mock.recorder = &MockEntryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntry) EXPECT() *MockEntryMockRecorder {
	return m.recorder
}

// AddUpdateRecursive mocks base method.
func (m *MockEntry) AddUpdateRecursive(ctx context.Context, u *types.Update, flags *types.UpdateInsertFlags) (tree.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUpdateRecursive", ctx, u, flags)
	ret0, _ := ret[0].(tree.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUpdateRecursive indicates an expected call of AddUpdateRecursive.
func (mr *MockEntryMockRecorder) AddUpdateRecursive(ctx, u, flags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUpdateRecursive", reflect.TypeOf((*MockEntry)(nil).AddUpdateRecursive), ctx, u, flags)
}

// FilterChilds mocks base method.
func (m *MockEntry) FilterChilds(keys map[string]string) ([]tree.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterChilds", keys)
	ret0, _ := ret[0].([]tree.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterChilds indicates an expected call of FilterChilds.
func (mr *MockEntryMockRecorder) FilterChilds(keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterChilds", reflect.TypeOf((*MockEntry)(nil).FilterChilds), keys)
}

// FinishInsertionPhase mocks base method.
func (m *MockEntry) FinishInsertionPhase(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishInsertionPhase", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishInsertionPhase indicates an expected call of FinishInsertionPhase.
func (mr *MockEntryMockRecorder) FinishInsertionPhase(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishInsertionPhase", reflect.TypeOf((*MockEntry)(nil).FinishInsertionPhase), ctx)
}

// GetByOwner mocks base method.
func (m *MockEntry) GetByOwner(owner string, result []*tree.LeafEntry) tree.LeafVariantSlice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOwner", owner, result)
	ret0, _ := ret[0].(tree.LeafVariantSlice)
	return ret0
}

// GetByOwner indicates an expected call of GetByOwner.
func (mr *MockEntryMockRecorder) GetByOwner(owner, result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOwner", reflect.TypeOf((*MockEntry)(nil).GetByOwner), owner, result)
}

// GetDeletes mocks base method.
func (m *MockEntry) GetDeletes(entries []types.DeleteEntry, aggregatePaths bool) ([]types.DeleteEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeletes", entries, aggregatePaths)
	ret0, _ := ret[0].([]types.DeleteEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeletes indicates an expected call of GetDeletes.
func (mr *MockEntryMockRecorder) GetDeletes(entries, aggregatePaths any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeletes", reflect.TypeOf((*MockEntry)(nil).GetDeletes), entries, aggregatePaths)
}

// GetFirstAncestorWithSchema mocks base method.
func (m *MockEntry) GetFirstAncestorWithSchema() (tree.Entry, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstAncestorWithSchema")
	ret0, _ := ret[0].(tree.Entry)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// GetFirstAncestorWithSchema indicates an expected call of GetFirstAncestorWithSchema.
func (mr *MockEntryMockRecorder) GetFirstAncestorWithSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstAncestorWithSchema", reflect.TypeOf((*MockEntry)(nil).GetFirstAncestorWithSchema))
}

// GetHighestPrecedence mocks base method.
func (m *MockEntry) GetHighestPrecedence(result tree.LeafVariantSlice, onlyNewOrUpdated bool) tree.LeafVariantSlice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighestPrecedence", result, onlyNewOrUpdated)
	ret0, _ := ret[0].(tree.LeafVariantSlice)
	return ret0
}

// GetHighestPrecedence indicates an expected call of GetHighestPrecedence.
func (mr *MockEntryMockRecorder) GetHighestPrecedence(result, onlyNewOrUpdated any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighestPrecedence", reflect.TypeOf((*MockEntry)(nil).GetHighestPrecedence), result, onlyNewOrUpdated)
}

// GetParent mocks base method.
func (m *MockEntry) GetParent() tree.Entry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParent")
	ret0, _ := ret[0].(tree.Entry)
	return ret0
}

// GetParent indicates an expected call of GetParent.
func (mr *MockEntryMockRecorder) GetParent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParent", reflect.TypeOf((*MockEntry)(nil).GetParent))
}

// GetRoot mocks base method.
func (m *MockEntry) GetRoot() tree.Entry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoot")
	ret0, _ := ret[0].(tree.Entry)
	return ret0
}

// GetRoot indicates an expected call of GetRoot.
func (mr *MockEntryMockRecorder) GetRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoot", reflect.TypeOf((*MockEntry)(nil).GetRoot))
}

// GetRootBasedEntryChain mocks base method.
func (m *MockEntry) GetRootBasedEntryChain() []tree.Entry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootBasedEntryChain")
	ret0, _ := ret[0].([]tree.Entry)
	return ret0
}

// GetRootBasedEntryChain indicates an expected call of GetRootBasedEntryChain.
func (mr *MockEntryMockRecorder) GetRootBasedEntryChain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootBasedEntryChain", reflect.TypeOf((*MockEntry)(nil).GetRootBasedEntryChain))
}

// GetSchema mocks base method.
func (m *MockEntry) GetSchema() *schema_server.SchemaElem {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchema")
	ret0, _ := ret[0].(*schema_server.SchemaElem)
	return ret0
}

// GetSchema indicates an expected call of GetSchema.
func (mr *MockEntryMockRecorder) GetSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockEntry)(nil).GetSchema))
}

// GetSchemaKeys mocks base method.
func (m *MockEntry) GetSchemaKeys() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaKeys")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetSchemaKeys indicates an expected call of GetSchemaKeys.
func (mr *MockEntryMockRecorder) GetSchemaKeys() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaKeys", reflect.TypeOf((*MockEntry)(nil).GetSchemaKeys))
}

// ImportConfig mocks base method.
func (m *MockEntry) ImportConfig(ctx context.Context, t importer.ImportConfigAdapter, intentName string, intentPrio int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportConfig", ctx, t, intentName, intentPrio)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportConfig indicates an expected call of ImportConfig.
func (mr *MockEntryMockRecorder) ImportConfig(ctx, t, intentName, intentPrio any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportConfig", reflect.TypeOf((*MockEntry)(nil).ImportConfig), ctx, t, intentName, intentPrio)
}

// IsRoot mocks base method.
func (m *MockEntry) IsRoot() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRoot")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRoot indicates an expected call of IsRoot.
func (mr *MockEntryMockRecorder) IsRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRoot", reflect.TypeOf((*MockEntry)(nil).IsRoot))
}

// MarkOwnerDelete mocks base method.
func (m *MockEntry) MarkOwnerDelete(o string, onlyIntended bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkOwnerDelete", o, onlyIntended)
}

// MarkOwnerDelete indicates an expected call of MarkOwnerDelete.
func (mr *MockEntryMockRecorder) MarkOwnerDelete(o, onlyIntended any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkOwnerDelete", reflect.TypeOf((*MockEntry)(nil).MarkOwnerDelete), o, onlyIntended)
}

// Navigate mocks base method.
func (m *MockEntry) Navigate(ctx context.Context, path []string, isRootPath bool) (tree.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Navigate", ctx, path, isRootPath)
	ret0, _ := ret[0].(tree.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Navigate indicates an expected call of Navigate.
func (mr *MockEntryMockRecorder) Navigate(ctx, path, isRootPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Navigate", reflect.TypeOf((*MockEntry)(nil).Navigate), ctx, path, isRootPath)
}

// NavigateLeafRef mocks base method.
func (m *MockEntry) NavigateLeafRef(ctx context.Context) ([]tree.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NavigateLeafRef", ctx)
	ret0, _ := ret[0].([]tree.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NavigateLeafRef indicates an expected call of NavigateLeafRef.
func (mr *MockEntryMockRecorder) NavigateLeafRef(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NavigateLeafRef", reflect.TypeOf((*MockEntry)(nil).NavigateLeafRef), ctx)
}

// NavigateSdcpbPath mocks base method.
func (m *MockEntry) NavigateSdcpbPath(ctx context.Context, path []*schema_server.PathElem, isRootPath bool) (tree.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NavigateSdcpbPath", ctx, path, isRootPath)
	ret0, _ := ret[0].(tree.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NavigateSdcpbPath indicates an expected call of NavigateSdcpbPath.
func (mr *MockEntryMockRecorder) NavigateSdcpbPath(ctx, path, isRootPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NavigateSdcpbPath", reflect.TypeOf((*MockEntry)(nil).NavigateSdcpbPath), ctx, path, isRootPath)
}

// Path mocks base method.
func (m *MockEntry) Path() types.PathSlice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(types.PathSlice)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockEntryMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockEntry)(nil).Path))
}

// PathName mocks base method.
func (m *MockEntry) PathName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathName")
	ret0, _ := ret[0].(string)
	return ret0
}

// PathName indicates an expected call of PathName.
func (mr *MockEntryMockRecorder) PathName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathName", reflect.TypeOf((*MockEntry)(nil).PathName))
}

// SdcpbPath mocks base method.
func (m *MockEntry) SdcpbPath() (*schema_server.Path, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SdcpbPath")
	ret0, _ := ret[0].(*schema_server.Path)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SdcpbPath indicates an expected call of SdcpbPath.
func (mr *MockEntryMockRecorder) SdcpbPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SdcpbPath", reflect.TypeOf((*MockEntry)(nil).SdcpbPath))
}

// SdcpbPathInternal mocks base method.
func (m *MockEntry) SdcpbPathInternal(spath []string) (*schema_server.Path, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SdcpbPathInternal", spath)
	ret0, _ := ret[0].(*schema_server.Path)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SdcpbPathInternal indicates an expected call of SdcpbPathInternal.
func (mr *MockEntryMockRecorder) SdcpbPathInternal(spath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SdcpbPathInternal", reflect.TypeOf((*MockEntry)(nil).SdcpbPathInternal), spath)
}

// StringIndent mocks base method.
func (m *MockEntry) StringIndent(result []string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StringIndent", result)
	ret0, _ := ret[0].([]string)
	return ret0
}

// StringIndent indicates an expected call of StringIndent.
func (mr *MockEntryMockRecorder) StringIndent(result any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StringIndent", reflect.TypeOf((*MockEntry)(nil).StringIndent), result)
}

// ToJson mocks base method.
func (m *MockEntry) ToJson(onlyNewOrUpdated bool) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToJson", onlyNewOrUpdated)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToJson indicates an expected call of ToJson.
func (mr *MockEntryMockRecorder) ToJson(onlyNewOrUpdated any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToJson", reflect.TypeOf((*MockEntry)(nil).ToJson), onlyNewOrUpdated)
}

// ToJsonIETF mocks base method.
func (m *MockEntry) ToJsonIETF(onlyNewOrUpdated bool) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToJsonIETF", onlyNewOrUpdated)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToJsonIETF indicates an expected call of ToJsonIETF.
func (mr *MockEntryMockRecorder) ToJsonIETF(onlyNewOrUpdated any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToJsonIETF", reflect.TypeOf((*MockEntry)(nil).ToJsonIETF), onlyNewOrUpdated)
}

// ToXML mocks base method.
func (m *MockEntry) ToXML(onlyNewOrUpdated, honorNamespace, operationWithNamespace, useOperationRemove bool) (*etree.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToXML", onlyNewOrUpdated, honorNamespace, operationWithNamespace, useOperationRemove)
	ret0, _ := ret[0].(*etree.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToXML indicates an expected call of ToXML.
func (mr *MockEntryMockRecorder) ToXML(onlyNewOrUpdated, honorNamespace, operationWithNamespace, useOperationRemove any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToXML", reflect.TypeOf((*MockEntry)(nil).ToXML), onlyNewOrUpdated, honorNamespace, operationWithNamespace, useOperationRemove)
}

// TreeExport mocks base method.
func (m *MockEntry) TreeExport(owner string) ([]*tree_persist.TreeElement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TreeExport", owner)
	ret0, _ := ret[0].([]*tree_persist.TreeElement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TreeExport indicates an expected call of TreeExport.
func (mr *MockEntryMockRecorder) TreeExport(owner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TreeExport", reflect.TypeOf((*MockEntry)(nil).TreeExport), owner)
}

// Validate mocks base method.
func (m *MockEntry) Validate(ctx context.Context, resultChan chan<- *types.ValidationResultEntry, concurrent bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Validate", ctx, resultChan, concurrent)
}

// Validate indicates an expected call of Validate.
func (mr *MockEntryMockRecorder) Validate(ctx, resultChan, concurrent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockEntry)(nil).Validate), ctx, resultChan, concurrent)
}

// Walk mocks base method.
func (m *MockEntry) Walk(ctx context.Context, v tree.EntryVisitor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk", ctx, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk.
func (mr *MockEntryMockRecorder) Walk(ctx, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockEntry)(nil).Walk), ctx, v)
}

// addChild mocks base method.
func (m *MockEntry) addChild(arg0 context.Context, arg1 tree.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addChild", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// addChild indicates an expected call of addChild.
func (mr *MockEntryMockRecorder) addChild(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addChild", reflect.TypeOf((*MockEntry)(nil).addChild), arg0, arg1)
}

// canDelete mocks base method.
func (m *MockEntry) canDelete() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "canDelete")
	ret0, _ := ret[0].(bool)
	return ret0
}

// canDelete indicates an expected call of canDelete.
func (mr *MockEntryMockRecorder) canDelete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "canDelete", reflect.TypeOf((*MockEntry)(nil).canDelete))
}

// canDeleteBranch mocks base method.
func (m *MockEntry) canDeleteBranch(keepDefault bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "canDeleteBranch", keepDefault)
	ret0, _ := ret[0].(bool)
	return ret0
}

// canDeleteBranch indicates an expected call of canDeleteBranch.
func (mr *MockEntryMockRecorder) canDeleteBranch(keepDefault any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "canDeleteBranch", reflect.TypeOf((*MockEntry)(nil).canDeleteBranch), keepDefault)
}

// deleteCanDeleteChilds mocks base method.
func (m *MockEntry) deleteCanDeleteChilds(keepDefault bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "deleteCanDeleteChilds", keepDefault)
}

// deleteCanDeleteChilds indicates an expected call of deleteCanDeleteChilds.
func (mr *MockEntryMockRecorder) deleteCanDeleteChilds(keepDefault any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteCanDeleteChilds", reflect.TypeOf((*MockEntry)(nil).deleteCanDeleteChilds), keepDefault)
}

// getChildren mocks base method.
func (m *MockEntry) getChildren() map[string]tree.Entry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getChildren")
	ret0, _ := ret[0].(map[string]tree.Entry)
	return ret0
}

// getChildren indicates an expected call of getChildren.
func (mr *MockEntryMockRecorder) getChildren() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getChildren", reflect.TypeOf((*MockEntry)(nil).getChildren))
}

// getHighestPrecedenceLeafValue mocks base method.
func (m *MockEntry) getHighestPrecedenceLeafValue(arg0 context.Context) (*tree.LeafEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getHighestPrecedenceLeafValue", arg0)
	ret0, _ := ret[0].(*tree.LeafEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getHighestPrecedenceLeafValue indicates an expected call of getHighestPrecedenceLeafValue.
func (mr *MockEntryMockRecorder) getHighestPrecedenceLeafValue(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getHighestPrecedenceLeafValue", reflect.TypeOf((*MockEntry)(nil).getHighestPrecedenceLeafValue), arg0)
}

// getHighestPrecedenceValueOfBranch mocks base method.
func (m *MockEntry) getHighestPrecedenceValueOfBranch(includeDeleted bool) int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getHighestPrecedenceValueOfBranch", includeDeleted)
	ret0, _ := ret[0].(int32)
	return ret0
}

// getHighestPrecedenceValueOfBranch indicates an expected call of getHighestPrecedenceValueOfBranch.
func (mr *MockEntryMockRecorder) getHighestPrecedenceValueOfBranch(includeDeleted any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getHighestPrecedenceValueOfBranch", reflect.TypeOf((*MockEntry)(nil).getHighestPrecedenceValueOfBranch), includeDeleted)
}

// remainsToExist mocks base method.
func (m *MockEntry) remainsToExist() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "remainsToExist")
	ret0, _ := ret[0].(bool)
	return ret0
}

// remainsToExist indicates an expected call of remainsToExist.
func (mr *MockEntryMockRecorder) remainsToExist() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "remainsToExist", reflect.TypeOf((*MockEntry)(nil).remainsToExist))
}

// shouldDelete mocks base method.
func (m *MockEntry) shouldDelete() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "shouldDelete")
	ret0, _ := ret[0].(bool)
	return ret0
}

// shouldDelete indicates an expected call of shouldDelete.
func (mr *MockEntryMockRecorder) shouldDelete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "shouldDelete", reflect.TypeOf((*MockEntry)(nil).shouldDelete))
}

// toJsonInternal mocks base method.
func (m *MockEntry) toJsonInternal(onlyNewOrUpdated, ietf bool) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "toJsonInternal", onlyNewOrUpdated, ietf)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// toJsonInternal indicates an expected call of toJsonInternal.
func (mr *MockEntryMockRecorder) toJsonInternal(onlyNewOrUpdated, ietf any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "toJsonInternal", reflect.TypeOf((*MockEntry)(nil).toJsonInternal), onlyNewOrUpdated, ietf)
}

// toXmlInternal mocks base method.
func (m *MockEntry) toXmlInternal(parent *etree.Element, onlyNewOrUpdated, honorNamespace, operationWithNamespace, useOperationRemove bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "toXmlInternal", parent, onlyNewOrUpdated, honorNamespace, operationWithNamespace, useOperationRemove)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// toXmlInternal indicates an expected call of toXmlInternal.
func (mr *MockEntryMockRecorder) toXmlInternal(parent, onlyNewOrUpdated, honorNamespace, operationWithNamespace, useOperationRemove any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "toXmlInternal", reflect.TypeOf((*MockEntry)(nil).toXmlInternal), parent, onlyNewOrUpdated, honorNamespace, operationWithNamespace, useOperationRemove)
}

// validateMandatory mocks base method.
func (m *MockEntry) validateMandatory(ctx context.Context, resultChan chan<- *types.ValidationResultEntry, statChan chan<- *types.ValidationStat) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "validateMandatory", ctx, resultChan, statChan)
}

// validateMandatory indicates an expected call of validateMandatory.
func (mr *MockEntryMockRecorder) validateMandatory(ctx, resultChan, statChan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "validateMandatory", reflect.TypeOf((*MockEntry)(nil).validateMandatory), ctx, resultChan, statChan)
}

// validateMandatoryWithKeys mocks base method.
func (m *MockEntry) validateMandatoryWithKeys(ctx context.Context, level int, attribute string, resultChan chan<- *types.ValidationResultEntry) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "validateMandatoryWithKeys", ctx, level, attribute, resultChan)
}

// validateMandatoryWithKeys indicates an expected call of validateMandatoryWithKeys.
func (mr *MockEntryMockRecorder) validateMandatoryWithKeys(ctx, level, attribute, resultChan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "validateMandatoryWithKeys", reflect.TypeOf((*MockEntry)(nil).validateMandatoryWithKeys), ctx, level, attribute, resultChan)
}

// MockEntryVisitor is a mock of EntryVisitor interface.
type MockEntryVisitor struct {
	ctrl     *gomock.Controller
	recorder *MockEntryVisitorMockRecorder
	isgomock struct{}
}

// MockEntryVisitorMockRecorder is the mock recorder for MockEntryVisitor.
type MockEntryVisitorMockRecorder struct {
	mock *MockEntryVisitor
}

// NewMockEntryVisitor creates a new mock instance.
func NewMockEntryVisitor(ctrl *gomock.Controller) *MockEntryVisitor {
	mock := &MockEntryVisitor{ctrl: ctrl}
	mock.recorder = &MockEntryVisitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntryVisitor) EXPECT() *MockEntryVisitorMockRecorder {
	return m.recorder
}

// Up mocks base method.
func (m *MockEntryVisitor) Up() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Up")
}

// Up indicates an expected call of Up.
func (mr *MockEntryVisitorMockRecorder) Up() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Up", reflect.TypeOf((*MockEntryVisitor)(nil).Up))
}

// Visit mocks base method.
func (m *MockEntryVisitor) Visit(ctx context.Context, e tree.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Visit", ctx, e)
	ret0, _ := ret[0].(error)
	return ret0
}

// Visit indicates an expected call of Visit.
func (mr *MockEntryVisitorMockRecorder) Visit(ctx, e any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Visit", reflect.TypeOf((*MockEntryVisitor)(nil).Visit), ctx, e)
}
