// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/schema/schema_client.go
//
// Generated by this command:
//
//	mockgen -package=mockschema -source=pkg/schema/schema_client.go -destination=./mocks/mockschema/client.go
//

// Package mockschema is a generated GoMock package.
package mockschema

import (
	context "context"
	reflect "reflect"

	sdcpb "github.com/sdcio/sdc-protos/sdcpb"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateSchema mocks base method.
func (m *MockClient) CreateSchema(ctx context.Context, in *sdcpb.CreateSchemaRequest, opts ...grpc.CallOption) (*sdcpb.CreateSchemaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSchema", varargs...)
	ret0, _ := ret[0].(*sdcpb.CreateSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSchema indicates an expected call of CreateSchema.
func (mr *MockClientMockRecorder) CreateSchema(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchema", reflect.TypeOf((*MockClient)(nil).CreateSchema), varargs...)
}

// DeleteSchema mocks base method.
func (m *MockClient) DeleteSchema(ctx context.Context, in *sdcpb.DeleteSchemaRequest, opts ...grpc.CallOption) (*sdcpb.DeleteSchemaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteSchema", varargs...)
	ret0, _ := ret[0].(*sdcpb.DeleteSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSchema indicates an expected call of DeleteSchema.
func (mr *MockClientMockRecorder) DeleteSchema(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchema", reflect.TypeOf((*MockClient)(nil).DeleteSchema), varargs...)
}

// ExpandPath mocks base method.
func (m *MockClient) ExpandPath(ctx context.Context, in *sdcpb.ExpandPathRequest, opts ...grpc.CallOption) (*sdcpb.ExpandPathResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExpandPath", varargs...)
	ret0, _ := ret[0].(*sdcpb.ExpandPathResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandPath indicates an expected call of ExpandPath.
func (mr *MockClientMockRecorder) ExpandPath(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandPath", reflect.TypeOf((*MockClient)(nil).ExpandPath), varargs...)
}

// GetSchema mocks base method.
func (m *MockClient) GetSchema(ctx context.Context, in *sdcpb.GetSchemaRequest, opts ...grpc.CallOption) (*sdcpb.GetSchemaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchema", varargs...)
	ret0, _ := ret[0].(*sdcpb.GetSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchema indicates an expected call of GetSchema.
func (mr *MockClientMockRecorder) GetSchema(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockClient)(nil).GetSchema), varargs...)
}

// GetSchemaDetails mocks base method.
func (m *MockClient) GetSchemaDetails(ctx context.Context, in *sdcpb.GetSchemaDetailsRequest, opts ...grpc.CallOption) (*sdcpb.GetSchemaDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchemaDetails", varargs...)
	ret0, _ := ret[0].(*sdcpb.GetSchemaDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaDetails indicates an expected call of GetSchemaDetails.
func (mr *MockClientMockRecorder) GetSchemaDetails(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaDetails", reflect.TypeOf((*MockClient)(nil).GetSchemaDetails), varargs...)
}

// GetSchemaElements mocks base method.
func (m *MockClient) GetSchemaElements(ctx context.Context, req *sdcpb.GetSchemaRequest, opts ...grpc.CallOption) (chan *sdcpb.SchemaElem, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSchemaElements", varargs...)
	ret0, _ := ret[0].(chan *sdcpb.SchemaElem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaElements indicates an expected call of GetSchemaElements.
func (mr *MockClientMockRecorder) GetSchemaElements(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaElements", reflect.TypeOf((*MockClient)(nil).GetSchemaElements), varargs...)
}

// ListSchema mocks base method.
func (m *MockClient) ListSchema(ctx context.Context, in *sdcpb.ListSchemaRequest, opts ...grpc.CallOption) (*sdcpb.ListSchemaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSchema", varargs...)
	ret0, _ := ret[0].(*sdcpb.ListSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSchema indicates an expected call of ListSchema.
func (mr *MockClientMockRecorder) ListSchema(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchema", reflect.TypeOf((*MockClient)(nil).ListSchema), varargs...)
}

// ReloadSchema mocks base method.
func (m *MockClient) ReloadSchema(ctx context.Context, in *sdcpb.ReloadSchemaRequest, opts ...grpc.CallOption) (*sdcpb.ReloadSchemaResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReloadSchema", varargs...)
	ret0, _ := ret[0].(*sdcpb.ReloadSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReloadSchema indicates an expected call of ReloadSchema.
func (mr *MockClientMockRecorder) ReloadSchema(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadSchema", reflect.TypeOf((*MockClient)(nil).ReloadSchema), varargs...)
}

// ToPath mocks base method.
func (m *MockClient) ToPath(ctx context.Context, in *sdcpb.ToPathRequest, opts ...grpc.CallOption) (*sdcpb.ToPathResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ToPath", varargs...)
	ret0, _ := ret[0].(*sdcpb.ToPathResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToPath indicates an expected call of ToPath.
func (mr *MockClientMockRecorder) ToPath(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToPath", reflect.TypeOf((*MockClient)(nil).ToPath), varargs...)
}

// UploadSchema mocks base method.
func (m *MockClient) UploadSchema(ctx context.Context, opts ...grpc.CallOption) (sdcpb.SchemaServer_UploadSchemaClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UploadSchema", varargs...)
	ret0, _ := ret[0].(sdcpb.SchemaServer_UploadSchemaClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadSchema indicates an expected call of UploadSchema.
func (mr *MockClientMockRecorder) UploadSchema(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadSchema", reflect.TypeOf((*MockClient)(nil).UploadSchema), varargs...)
}
