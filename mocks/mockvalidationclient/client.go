// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/datastore/clients/validationClient.go
//
// Generated by this command:
//
//	mockgen -package=mockvalidationclient -source=pkg/datastore/clients/validationClient.go -destination=./mocks/mockvalidationclient/client.go
//

// Package mockvalidationclient is a generated GoMock package.
package mockvalidationclient

import (
	context "context"
	reflect "reflect"
	time "time"

	cache "github.com/sdcio/data-server/pkg/cache"
	schema_server "github.com/sdcio/sdc-protos/sdcpb"
	gomock "go.uber.org/mock/gomock"
)

// MockValidationClient is a mock of ValidationClient interface.
type MockValidationClient struct {
	ctrl     *gomock.Controller
	recorder *MockValidationClientMockRecorder
	isgomock struct{}
}

// MockValidationClientMockRecorder is the mock recorder for MockValidationClient.
type MockValidationClientMockRecorder struct {
	mock *MockValidationClient
}

// NewMockValidationClient creates a new mock instance.
func NewMockValidationClient(ctrl *gomock.Controller) *MockValidationClient {
	mock := &MockValidationClient{ctrl: ctrl}
	mock.recorder = &MockValidationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidationClient) EXPECT() *MockValidationClientMockRecorder {
	return m.recorder
}

// GetSchemaElements mocks base method.
func (m *MockValidationClient) GetSchemaElements(ctx context.Context, p *schema_server.Path, done chan struct{}) (chan *schema_server.GetSchemaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaElements", ctx, p, done)
	ret0, _ := ret[0].(chan *schema_server.GetSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaElements indicates an expected call of GetSchemaElements.
func (mr *MockValidationClientMockRecorder) GetSchemaElements(ctx, p, done any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaElements", reflect.TypeOf((*MockValidationClient)(nil).GetSchemaElements), ctx, p, done)
}

// GetSchemaSdcpbPath mocks base method.
func (m *MockValidationClient) GetSchemaSdcpbPath(ctx context.Context, path *schema_server.Path) (*schema_server.GetSchemaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaSdcpbPath", ctx, path)
	ret0, _ := ret[0].(*schema_server.GetSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaSdcpbPath indicates an expected call of GetSchemaSdcpbPath.
func (mr *MockValidationClientMockRecorder) GetSchemaSdcpbPath(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaSdcpbPath", reflect.TypeOf((*MockValidationClient)(nil).GetSchemaSdcpbPath), ctx, path)
}

// GetSchemaSlicePath mocks base method.
func (m *MockValidationClient) GetSchemaSlicePath(ctx context.Context, path []string) (*schema_server.GetSchemaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchemaSlicePath", ctx, path)
	ret0, _ := ret[0].(*schema_server.GetSchemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchemaSlicePath indicates an expected call of GetSchemaSlicePath.
func (mr *MockValidationClientMockRecorder) GetSchemaSlicePath(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchemaSlicePath", reflect.TypeOf((*MockValidationClient)(nil).GetSchemaSlicePath), ctx, path)
}

// GetValue mocks base method.
func (m *MockValidationClient) GetValue(ctx context.Context, candidateName string, path *schema_server.Path) (*schema_server.TypedValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue", ctx, candidateName, path)
	ret0, _ := ret[0].(*schema_server.TypedValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValue indicates an expected call of GetValue.
func (mr *MockValidationClientMockRecorder) GetValue(ctx, candidateName, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockValidationClient)(nil).GetValue), ctx, candidateName, path)
}

// GetValues mocks base method.
func (m *MockValidationClient) GetValues(ctx context.Context, candidateName string, path *schema_server.Path) ([]*schema_server.TypedValue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValues", ctx, candidateName, path)
	ret0, _ := ret[0].([]*schema_server.TypedValue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValues indicates an expected call of GetValues.
func (mr *MockValidationClientMockRecorder) GetValues(ctx, candidateName, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValues", reflect.TypeOf((*MockValidationClient)(nil).GetValues), ctx, candidateName, path)
}

// ReadIntended mocks base method.
func (m *MockValidationClient) ReadIntended(ctx context.Context, opts *cache.Opts, paths [][]string, period time.Duration) []*cache.Update {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadIntended", ctx, opts, paths, period)
	ret0, _ := ret[0].([]*cache.Update)
	return ret0
}

// ReadIntended indicates an expected call of ReadIntended.
func (mr *MockValidationClientMockRecorder) ReadIntended(ctx, opts, paths, period any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadIntended", reflect.TypeOf((*MockValidationClient)(nil).ReadIntended), ctx, opts, paths, period)
}

// ToPath mocks base method.
func (m *MockValidationClient) ToPath(ctx context.Context, path []string) (*schema_server.Path, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToPath", ctx, path)
	ret0, _ := ret[0].(*schema_server.Path)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToPath indicates an expected call of ToPath.
func (mr *MockValidationClientMockRecorder) ToPath(ctx, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToPath", reflect.TypeOf((*MockValidationClient)(nil).ToPath), ctx, path)
}
