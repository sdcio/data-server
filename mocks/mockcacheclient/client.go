// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cache/cache.go
//
// Generated by this command:
//
//	mockgen -package=mockcacheclient -source=pkg/cache/cache.go -destination=./mocks/mockcacheclient/client.go
//

// Package mockcacheclient is a generated GoMock package.
package mockcacheclient

import (
	context "context"
	reflect "reflect"

	tree_persist "github.com/sdcio/sdc-protos/tree_persist"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// InstanceClose mocks base method.
func (m *MockClient) InstanceClose(ctx context.Context, cacheInstanceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceClose", ctx, cacheInstanceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstanceClose indicates an expected call of InstanceClose.
func (mr *MockClientMockRecorder) InstanceClose(ctx, cacheInstanceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceClose", reflect.TypeOf((*MockClient)(nil).InstanceClose), ctx, cacheInstanceName)
}

// InstanceCreate mocks base method.
func (m *MockClient) InstanceCreate(ctx context.Context, cacheInstanceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceCreate", ctx, cacheInstanceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstanceCreate indicates an expected call of InstanceCreate.
func (mr *MockClientMockRecorder) InstanceCreate(ctx, cacheInstanceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceCreate", reflect.TypeOf((*MockClient)(nil).InstanceCreate), ctx, cacheInstanceName)
}

// InstanceDelete mocks base method.
func (m *MockClient) InstanceDelete(ctx context.Context, cacheInstanceName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceDelete", ctx, cacheInstanceName)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstanceDelete indicates an expected call of InstanceDelete.
func (mr *MockClientMockRecorder) InstanceDelete(ctx, cacheInstanceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceDelete", reflect.TypeOf((*MockClient)(nil).InstanceDelete), ctx, cacheInstanceName)
}

// InstanceExists mocks base method.
func (m *MockClient) InstanceExists(ctx context.Context, cacheInstanceName string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceExists", ctx, cacheInstanceName)
	ret0, _ := ret[0].(bool)
	return ret0
}

// InstanceExists indicates an expected call of InstanceExists.
func (mr *MockClientMockRecorder) InstanceExists(ctx, cacheInstanceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceExists", reflect.TypeOf((*MockClient)(nil).InstanceExists), ctx, cacheInstanceName)
}

// InstanceIntentDelete mocks base method.
func (m *MockClient) InstanceIntentDelete(ctx context.Context, cacheName, intentName string, IgnoreNonExisting bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceIntentDelete", ctx, cacheName, intentName, IgnoreNonExisting)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstanceIntentDelete indicates an expected call of InstanceIntentDelete.
func (mr *MockClientMockRecorder) InstanceIntentDelete(ctx, cacheName, intentName, IgnoreNonExisting any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceIntentDelete", reflect.TypeOf((*MockClient)(nil).InstanceIntentDelete), ctx, cacheName, intentName, IgnoreNonExisting)
}

// InstanceIntentExists mocks base method.
func (m *MockClient) InstanceIntentExists(ctx context.Context, cacheName, intentName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceIntentExists", ctx, cacheName, intentName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceIntentExists indicates an expected call of InstanceIntentExists.
func (mr *MockClientMockRecorder) InstanceIntentExists(ctx, cacheName, intentName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceIntentExists", reflect.TypeOf((*MockClient)(nil).InstanceIntentExists), ctx, cacheName, intentName)
}

// InstanceIntentGet mocks base method.
func (m *MockClient) InstanceIntentGet(ctx context.Context, cacheName, intentName string) (*tree_persist.Intent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceIntentGet", ctx, cacheName, intentName)
	ret0, _ := ret[0].(*tree_persist.Intent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceIntentGet indicates an expected call of InstanceIntentGet.
func (mr *MockClientMockRecorder) InstanceIntentGet(ctx, cacheName, intentName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceIntentGet", reflect.TypeOf((*MockClient)(nil).InstanceIntentGet), ctx, cacheName, intentName)
}

// InstanceIntentGetAll mocks base method.
func (m *MockClient) InstanceIntentGetAll(ctx context.Context, cacheName string, excludeIntentNames []string, intentChan chan<- *tree_persist.Intent, errChan chan<- error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InstanceIntentGetAll", ctx, cacheName, excludeIntentNames, intentChan, errChan)
}

// InstanceIntentGetAll indicates an expected call of InstanceIntentGetAll.
func (mr *MockClientMockRecorder) InstanceIntentGetAll(ctx, cacheName, excludeIntentNames, intentChan, errChan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceIntentGetAll", reflect.TypeOf((*MockClient)(nil).InstanceIntentGetAll), ctx, cacheName, excludeIntentNames, intentChan, errChan)
}

// InstanceIntentModify mocks base method.
func (m *MockClient) InstanceIntentModify(ctx context.Context, cacheName string, intent *tree_persist.Intent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceIntentModify", ctx, cacheName, intent)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstanceIntentModify indicates an expected call of InstanceIntentModify.
func (mr *MockClientMockRecorder) InstanceIntentModify(ctx, cacheName, intent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceIntentModify", reflect.TypeOf((*MockClient)(nil).InstanceIntentModify), ctx, cacheName, intent)
}

// InstanceIntentsList mocks base method.
func (m *MockClient) InstanceIntentsList(ctx context.Context, cacheInstanceName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceIntentsList", ctx, cacheInstanceName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceIntentsList indicates an expected call of InstanceIntentsList.
func (mr *MockClientMockRecorder) InstanceIntentsList(ctx, cacheInstanceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceIntentsList", reflect.TypeOf((*MockClient)(nil).InstanceIntentsList), ctx, cacheInstanceName)
}

// InstancesList mocks base method.
func (m *MockClient) InstancesList(ctx context.Context) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstancesList", ctx)
	ret0, _ := ret[0].([]string)
	return ret0
}

// InstancesList indicates an expected call of InstancesList.
func (mr *MockClientMockRecorder) InstancesList(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstancesList", reflect.TypeOf((*MockClient)(nil).InstancesList), ctx)
}
