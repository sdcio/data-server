// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/datastore/target/target.go
//
// Generated by this command:
//
//	mockgen -package=mocktarget -source=pkg/datastore/target/target.go -destination=./mocks/mocktarget/target.go
//

// Package mocktarget is a generated GoMock package.
package mocktarget

import (
	context "context"
	reflect "reflect"

	etree "github.com/beevik/etree"
	config "github.com/sdcio/data-server/pkg/config"
	target "github.com/sdcio/data-server/pkg/datastore/target"
	schema_server "github.com/sdcio/sdc-protos/sdcpb"
	gomock "go.uber.org/mock/gomock"
)

// MockTarget is a mock of Target interface.
type MockTarget struct {
	ctrl     *gomock.Controller
	recorder *MockTargetMockRecorder
	isgomock struct{}
}

// MockTargetMockRecorder is the mock recorder for MockTarget.
type MockTargetMockRecorder struct {
	mock *MockTarget
}

// NewMockTarget creates a new mock instance.
func NewMockTarget(ctrl *gomock.Controller) *MockTarget {
	mock := &MockTarget{ctrl: ctrl}
	mock.recorder = &MockTargetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTarget) EXPECT() *MockTargetMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockTarget) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTargetMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTarget)(nil).Close))
}

// Get mocks base method.
func (m *MockTarget) Get(ctx context.Context, req *schema_server.GetDataRequest) (*schema_server.GetDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, req)
	ret0, _ := ret[0].(*schema_server.GetDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTargetMockRecorder) Get(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTarget)(nil).Get), ctx, req)
}

// Set mocks base method.
func (m *MockTarget) Set(ctx context.Context, source target.TargetSource) (*schema_server.SetDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, source)
	ret0, _ := ret[0].(*schema_server.SetDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockTargetMockRecorder) Set(ctx, source any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockTarget)(nil).Set), ctx, source)
}

// Status mocks base method.
func (m *MockTarget) Status() *target.TargetStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(*target.TargetStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockTargetMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockTarget)(nil).Status))
}

// Sync mocks base method.
func (m *MockTarget) Sync(ctx context.Context, syncConfig *config.Sync, syncCh chan *target.SyncUpdate) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sync", ctx, syncConfig, syncCh)
}

// Sync indicates an expected call of Sync.
func (mr *MockTargetMockRecorder) Sync(ctx, syncConfig, syncCh any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockTarget)(nil).Sync), ctx, syncConfig, syncCh)
}

// MockTargetSource is a mock of TargetSource interface.
type MockTargetSource struct {
	ctrl     *gomock.Controller
	recorder *MockTargetSourceMockRecorder
	isgomock struct{}
}

// MockTargetSourceMockRecorder is the mock recorder for MockTargetSource.
type MockTargetSourceMockRecorder struct {
	mock *MockTargetSource
}

// NewMockTargetSource creates a new mock instance.
func NewMockTargetSource(ctrl *gomock.Controller) *MockTargetSource {
	mock := &MockTargetSource{ctrl: ctrl}
	mock.recorder = &MockTargetSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargetSource) EXPECT() *MockTargetSourceMockRecorder {
	return m.recorder
}

// ToJson mocks base method.
func (m *MockTargetSource) ToJson(onlyNewOrUpdated bool) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToJson", onlyNewOrUpdated)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToJson indicates an expected call of ToJson.
func (mr *MockTargetSourceMockRecorder) ToJson(onlyNewOrUpdated any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToJson", reflect.TypeOf((*MockTargetSource)(nil).ToJson), onlyNewOrUpdated)
}

// ToJsonIETF mocks base method.
func (m *MockTargetSource) ToJsonIETF(onlyNewOrUpdated bool) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToJsonIETF", onlyNewOrUpdated)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToJsonIETF indicates an expected call of ToJsonIETF.
func (mr *MockTargetSourceMockRecorder) ToJsonIETF(onlyNewOrUpdated any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToJsonIETF", reflect.TypeOf((*MockTargetSource)(nil).ToJsonIETF), onlyNewOrUpdated)
}

// ToProtoDeletes mocks base method.
func (m *MockTargetSource) ToProtoDeletes(ctx context.Context) ([]*schema_server.Path, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToProtoDeletes", ctx)
	ret0, _ := ret[0].([]*schema_server.Path)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToProtoDeletes indicates an expected call of ToProtoDeletes.
func (mr *MockTargetSourceMockRecorder) ToProtoDeletes(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToProtoDeletes", reflect.TypeOf((*MockTargetSource)(nil).ToProtoDeletes), ctx)
}

// ToProtoUpdates mocks base method.
func (m *MockTargetSource) ToProtoUpdates(ctx context.Context, onlyNewOrUpdated bool) ([]*schema_server.Update, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToProtoUpdates", ctx, onlyNewOrUpdated)
	ret0, _ := ret[0].([]*schema_server.Update)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToProtoUpdates indicates an expected call of ToProtoUpdates.
func (mr *MockTargetSourceMockRecorder) ToProtoUpdates(ctx, onlyNewOrUpdated any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToProtoUpdates", reflect.TypeOf((*MockTargetSource)(nil).ToProtoUpdates), ctx, onlyNewOrUpdated)
}

// ToXML mocks base method.
func (m *MockTargetSource) ToXML(onlyNewOrUpdated, honorNamespace, operationWithNamespace, useOperationRemove bool) (*etree.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToXML", onlyNewOrUpdated, honorNamespace, operationWithNamespace, useOperationRemove)
	ret0, _ := ret[0].(*etree.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToXML indicates an expected call of ToXML.
func (mr *MockTargetSourceMockRecorder) ToXML(onlyNewOrUpdated, honorNamespace, operationWithNamespace, useOperationRemove any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToXML", reflect.TypeOf((*MockTargetSource)(nil).ToXML), onlyNewOrUpdated, honorNamespace, operationWithNamespace, useOperationRemove)
}
