// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/datastore/target/target.go
//
// Generated by this command:
//
//	mockgen -package=mocktarget -source=pkg/datastore/target/target.go -destination=./mocks/mocktarget/target.go
//

// Package mocktarget is a generated GoMock package.
package mocktarget

import (
	context "context"
	reflect "reflect"

	config "github.com/sdcio/data-server/pkg/config"
	types "github.com/sdcio/data-server/pkg/datastore/target/types"
	schema_server "github.com/sdcio/sdc-protos/sdcpb"
	gomock "go.uber.org/mock/gomock"
)

// MockTarget is a mock of Target interface.
type MockTarget struct {
	ctrl     *gomock.Controller
	recorder *MockTargetMockRecorder
	isgomock struct{}
}

// MockTargetMockRecorder is the mock recorder for MockTarget.
type MockTargetMockRecorder struct {
	mock *MockTarget
}

// NewMockTarget creates a new mock instance.
func NewMockTarget(ctrl *gomock.Controller) *MockTarget {
	mock := &MockTarget{ctrl: ctrl}
	mock.recorder = &MockTargetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTarget) EXPECT() *MockTargetMockRecorder {
	return m.recorder
}

// AddSyncs mocks base method.
func (m *MockTarget) AddSyncs(ctx context.Context, sps ...*config.SyncProtocol) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range sps {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddSyncs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSyncs indicates an expected call of AddSyncs.
func (mr *MockTargetMockRecorder) AddSyncs(ctx any, sps ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, sps...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSyncs", reflect.TypeOf((*MockTarget)(nil).AddSyncs), varargs...)
}

// Close mocks base method.
func (m *MockTarget) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockTargetMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockTarget)(nil).Close))
}

// Get mocks base method.
func (m *MockTarget) Get(ctx context.Context, req *schema_server.GetDataRequest) (*schema_server.GetDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, req)
	ret0, _ := ret[0].(*schema_server.GetDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTargetMockRecorder) Get(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTarget)(nil).Get), ctx, req)
}

// Set mocks base method.
func (m *MockTarget) Set(ctx context.Context, source types.TargetSource) (*schema_server.SetDataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, source)
	ret0, _ := ret[0].(*schema_server.SetDataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockTargetMockRecorder) Set(ctx, source any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockTarget)(nil).Set), ctx, source)
}

// Status mocks base method.
func (m *MockTarget) Status() *types.TargetStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(*types.TargetStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockTargetMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockTarget)(nil).Status))
}
